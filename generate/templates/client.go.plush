// Code generated by oto; DO NOT EDIT.
// Generated from plush template file at generate/templates/client.go.plush

package <%= def.PackageName %>

import (
	"bytes"
	"compress/gzip"
	"context"
	"crypto/hmac"
	"crypto/sha256"
	"encoding/base64"
	"encoding/json"
	"io"
	"io/ioutil"
	"net/http"
	"strings"
	"fmt"

	"github.com/pkg/errors"
	<%= for (importPath, name) in def.Imports { %><%= name %> "<%= importPath %>"
	<% } %>
)

// Client is used to access Pace services.
type Client struct {
	// RemoteHost is the URL of the remote server that this Client should
	// access.
	RemoteHost  string
	// HTTPClient is the http.Client to use when making HTTP requests.
	HTTPClient 	*http.Client
	// Debug writes a line of debug log output.
	Debug func(s string)
	// secret is the Secret to make the HMAC signature
	secret []byte
}

// New makes a new Client.
func New(remoteHost, secret string) *Client {
	return &Client{
		RemoteHost: remoteHost,
		Debug: func(s string) {},
		// No timeout is set to HTTPClient
		// since some operations takes too long
		HTTPClient: &http.Client{},
		secret: []byte(secret),
	}
}

<%= for (service) in def.Services { %>
<%= format_comment_text(service.Comment) %>type <%= service.Name %> struct {
	client *Client
}

// New<%= service.Name %> makes a new client for accessing <%= service.Name %> services.
func New<%= service.Name %>(client *Client) *<%= service.Name %> {
	return &<%= service.Name %>{
		client: client,
	}
}

<%= for (method) in service.Methods { %>
<%= format_comment_text(method.Comment) %>func (s *<%= service.Name %>) <%= method.Name %>(ctx context.Context, r <%= method.InputObject.TypeName %>) (*<%= method.OutputObject.TypeName %>, error) {
	requestBodyBytes, err := json.Marshal(r)
	if err != nil {
		return nil, errors.Wrap(err, "<%= service.Name %>.<%= method.Name %>: marshal <%= method.InputObject.TypeName %>")
	}
	signature, err := generateSignature(requestBodyBytes, s.client.secret)
	if err != nil {
		return nil, errors.Wrap(err, "<%= service.Name %>.<%= method.Name %>: generate signature <%= method.InputObject.TypeName %>")
	}
	url := s.client.RemoteHost + "<%= service.Name %>.<%= method.Name %>"
	s.client.Debug(fmt.Sprintf("POST %s", url))
	s.client.Debug(fmt.Sprintf(">> %s", string(requestBodyBytes)))
	req, err := http.NewRequest(http.MethodPost, url, bytes.NewReader(requestBodyBytes))
	if err != nil {
		return nil, errors.Wrap(err, "<%= service.Name %>.<%= method.Name %>: NewRequest")
	}
	req.Header.Set("X-API-SIGNATURE", signature)
	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("Accept-Encoding", "gzip")
	req = req.WithContext(ctx)
	resp, err := s.client.HTTPClient.Do(req)
	if err != nil {
		return nil, errors.Wrap(err, "<%= service.Name %>.<%= method.Name %>")
	}
	defer resp.Body.Close()
	var response struct {
		<%= method.OutputObject.TypeName %>
		Error string
	}
	var bodyReader io.Reader = resp.Body
	if strings.Contains(resp.Header.Get("Content-Encoding"), "gzip") {
		decodedBody, err := gzip.NewReader(resp.Body)
		if err != nil {
			return nil, errors.Wrap(err, "<%= service.Name %>.<%= method.Name %>: new gzip reader")
		}
		defer decodedBody.Close()
		bodyReader = decodedBody
	}
	respBodyBytes, err := ioutil.ReadAll(bodyReader)
	if err != nil {
		return nil, errors.Wrap(err, "<%= service.Name %>.<%= method.Name %>: read response body")
	}
	if err := json.Unmarshal(respBodyBytes, &response); err != nil {
		if resp.StatusCode != http.StatusOK {
			return nil, errors.Errorf("<%= service.Name %>.<%= method.Name %>: (%d) %v", resp.StatusCode, string(respBodyBytes))
		}
		return nil, err
	}
	if response.Error != "" {
		return nil, errors.New(response.Error)
	}
	return &response.<%= method.OutputObject.TypeName %>, nil
}
<% } %>
<% } %>

<%= for (object) in def.Objects { %>
	<%= if (!object.Imported) { %>
		<%= format_comment_text(object.Comment) %>type <%= object.Name %> struct {
			<%= for (field) in object.Fields { %>
				<%= if (field.Name != "Error") { %>
 					<%= format_comment_text(field.Comment) %><%= if (field.Name != "Base") { %><%= field.Name %> <%= if (field.Type.Multiple == true) { %>[]<% } %><%= field.Type.TypeName %> `json:"<%= camelize_down(field.Name) %><%= if (field.OmitEmpty) { %>,omitempty<% } %>" yaml:"<%= field.NameLowerCamel %><%= if (field.OmitEmpty) { %>,omitempty<% } %>"`<% } else { %> <%= field.Type.TypeName %> <% } %>
				<% } %>
			<% } %>
		}
	<% } %>
<% } %>

func generateSignature(message, secret []byte) (string, error) {
	mac := hmac.New(sha256.New, secret)
	if _, err := mac.Write(message); err != nil {
		return "", err
	}
	sig := base64.StdEncoding.EncodeToString(mac.Sum(nil))
	return sig, nil
}